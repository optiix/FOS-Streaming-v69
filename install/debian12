#!/bin/bash

# FOS-Streaming v69 SÄKER Installation Script för Debian 12 (Bookworm)
# Uppdaterad för 2025 med PHP 8.1, säkerhetshärdning och moderna dependencies
# Använder optiix/FOS-Streaming-v69 repository med integrerade säkerhetsförbättringar

set -e  # Exit on any error

# Färger för output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
NC='\033[0m' # No Color

echo -e "${BLUE}============================================================="
echo "FOS-Streaming v69 SÄKER Installation för Debian 12 (Bookworm)"
echo "Med integrerade säkerhetsförbättringar från optiix repository"
echo "=============================================================${NC}"

echo -e "${MAGENTA}VIKTIGT: PRE-INSTALLATION KONFIGURATION${NC}"
echo -e "${CYAN}=============================================================${NC}"
echo ""
echo -e "${YELLOW}INNAN installationen startar måste du kontrollera och eventuellt"
echo -e "redigera följande filer om du vill anpassa standardinställningarna:${NC}"
echo ""
echo -e "${GREEN}1. TIMEZONE INSTÄLLNINGAR:${NC}"
echo -e "   Fil: install/debian12 (denna fil)"
echo -e "   Rad: ~65 - date_default_timezone_set('Europe/Stockholm')"
echo -e "   Ändra 'Europe/Stockholm' till din timezone om du inte är i Sverige"
echo ""
echo -e "${GREEN}2. FIREWALL PORTAR:${NC}"
echo -e "   Om du använder andra SSH-portar än 22, redigera UFW-reglerna"
echo -e "   Rad: ~85-90 i denna fil"
echo ""
echo -e "${GREEN}3. DATABASE NAMN (valfritt):${NC}"
echo -e "   Standarddatabasen heter 'fos' - detta kan ändras senare"
echo ""
echo -e "${GREEN}4. HLS FOLDER NAMN (valfritt):${NC}"
echo -e "   Standard HLS-mapp är 'hl' - detta konfigureras automatiskt"
echo ""
echo -e "${CYAN}=============================================================${NC}"
echo -e "${RED}SÄKERHETSNOTIS: Alla lösenord och nycklar genereras automatiskt!"
echo -e "Du behöver INTE redigera några lösenord eller säkerhetsnycklar.${NC}"
echo ""
echo -e "${YELLOW}Installationen kommer att:${NC}"
echo "• Generera säkra slumpmässiga lösenord för MySQL"
echo "• Skapa en säker APP_KEY för kryptering"  
echo "• Konfigurera .env fil automatiskt med alla säkra inställningar"
echo "• Ersätta alla osäkra PHP-filer med säkra versioner"
echo "• Implementera Fail2Ban, UFW firewall och säkerhetshärdning"
echo "• Installera PHP 8.1 med säkra konfigurationer"
echo ""
echo -e "${CYAN}=============================================================${NC}"

# Bekräftelse från användaren
read -p "Har du kontrollerat inställningarna ovan och är redo att fortsätta? (y/N): " -n 1 -r
echo ""
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo -e "${YELLOW}Installation avbruten. Redigera filerna enligt instruktionerna ovan och kör scriptet igen.${NC}"
    exit 0
fi

echo ""
echo -e "${GREEN}Startar säker installation...${NC}"
sleep 2

# Repository inställningar
MAIN_REPO="https://github.com/optiix/FOS-Streaming-v69.git"
NGINX_REPO="https://github.com/theraw/fospackv69.git"  # För nginx build

# Logging funktioner
log() {
    echo -e "${GREEN}[$(date '+%Y-%m-%d %H:%M:%S')]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[$(date '+%Y-%m-%d %H:%M:%S')] WARNING:${NC} $1"
}

error() {
    echo -e "${RED}[$(date '+%Y-%m-%d %H:%M:%S')] ERROR:${NC} $1"
}

success() {
    echo -e "${GREEN}[$(date '+%Y-%m-%d %H:%M:%S')] SUCCESS:${NC} $1"
}

# Kontrollera om scriptet körs som root
if [[ $EUID -ne 0 ]]; then
   error "Detta script måste köras som root"
   echo "Kör: sudo bash install/debian12"
   exit 1
fi

# Kontrollera Debian version
if ! grep -q "bookworm\|12" /etc/os-release; then
    warn "Detta script är designat för Debian 12 (Bookworm)"
    echo "Upptäckt version:"
    cat /etc/os-release | grep VERSION
    read -p "Fortsätt ändå? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
    fi
fi

# Kontrollera internetanslutning
log "Kontrollerar internetanslutning..."
if ! ping -c 1 google.com &> /dev/null; then
    error "Ingen internetanslutning. Kontrollera nätverket och försök igen."
    exit 1
fi

# Generera säkra lösenord och nycklar
log "Genererar säkra lösenord och krypteringsnycklar..."
MYSQL_ROOT_PASSWORD=$(openssl rand -base64 32 | tr -d "=+/" | cut -c1-25)
MYSQL_FOS_PASSWORD=$(openssl rand -base64 32 | tr -d "=+/" | cut -c1-25)
APP_KEY=$(openssl rand -hex 32)

# Spara lösenord säkert för senare användning
mkdir -p /root/.fos-streaming
echo "$MYSQL_ROOT_PASSWORD" > /root/.fos-streaming/mysql_root_password
echo "$MYSQL_FOS_PASSWORD" > /root/.fos-streaming/mysql_fos_password
echo "$APP_KEY" > /root/.fos-streaming/app_key
chmod 700 /root/.fos-streaming
chmod 600 /root/.fos-streaming/*

success "Säkra nycklar genererade och sparade"

# Systemuppdatering
log "Uppdaterar systempaket (detta kan ta några minuter)..."
export DEBIAN_FRONTEND=noninteractive
apt-get update -y
apt-get upgrade -y
apt-get dist-upgrade -y
apt-get autoremove -y

# Installera essentiella säkerhetspaket
log "Installerar säkerhetspaket och utvecklingsverktyg..."
apt-get install -y build-essential libssl-dev curl nano wget zip unzip git lsof iftop htop vim \
    ca-certificates apt-transport-https software-properties-common gnupg2 fail2ban ufw \
    logrotate rsyslog clamav clamav-daemon rkhunter chkrootkit aide composer openssl

# Skapa loggmapp för FOS-Streaming
log "Skapar loggmappar..."
mkdir -p /var/log/fos-streaming
mkdir -p /var/log/nginx
chmod 755 /var/log/fos-streaming

# Säkerhetshärdning - Konfigurera UFW firewall
log "Konfigurerar brandvägg (UFW)..."
ufw --force reset
ufw default deny incoming
ufw default allow outgoing
ufw allow 22/tcp    # SSH (ändra detta om du använder annan port)
ufw allow 80/tcp    # HTTP
ufw allow 443/tcp   # HTTPS
ufw allow 7777/tcp  # FOS Web Interface
ufw --force enable

success "Brandvägg konfigurerad och aktiverad"

# Säkerhetshärdning - Konfigurera Fail2Ban
log "Konfigurerar Fail2Ban för attack-skydd..."
cat > /etc/fail2ban/jail.local << 'EOF'
[DEFAULT]
bantime = 3600
findtime = 600
maxretry = 3
backend = systemd
banaction = ufw

[sshd]
enabled = true
port = ssh
logpath = %(sshd_log)s
maxretry = 3

[nginx-http-auth]
enabled = true
filter = nginx-http-auth
port = http,https
logpath = /var/log/nginx/error.log

[fos-streaming]
enabled = true
port = 7777
filter = fos-streaming
logpath = /var/log/fos-streaming/app.log
maxretry = 5
bantime = 1800
EOF

# Skapa Fail2Ban filter för FOS-Streaming
cat > /etc/fail2ban/filter.d/fos-streaming.conf << 'EOF'
[Definition]
failregex = ^.*SECURITY VIOLATION.*"ip":"<HOST>".*$
            ^.*Failed login attempt.*from <HOST>.*$
            ^.*Rate limit exceeded.*<HOST>.*$
ignoreregex = 
EOF

systemctl restart fail2ban
systemctl enable fail2ban

success "Fail2Ban konfigurerat för attack-skydd"

# Lägg till PHP 8.1 repository
log "Lägger till PHP 8.1 repository..."
wget -qO - https://packages.sury.org/php/apt.gpg | gpg --dearmor -o /etc/apt/trusted.gpg.d/sury-php.gpg
echo "deb https://packages.sury.org/php/ bookworm main" > /etc/apt/sources.list.d/php.list

# Uppdatera paketlistor
apt-get update -y

# Installera PHP 8.1 och extensions
log "Installerar PHP 8.1 och alla nödvändiga extensions..."
apt-get install -y php8.1 php8.1-cgi php8.1-bcmath php8.1-bz2 php8.1-cli php8.1-common \
    php8.1-curl php8.1-dba php8.1-dev php8.1-enchant php8.1-fpm php8.1-gd php8.1-gmp \
    php8.1-imap php8.1-intl php8.1-ldap php8.1-mbstring php8.1-mysql php8.1-odbc \
    php8.1-opcache php8.1-pgsql php8.1-pspell php8.1-readline php8.1-snmp php8.1-soap \
    php8.1-sqlite3 php8.1-tidy php8.1-xml php8.1-xmlrpc php8.1-xsl php8.1-zip

success "PHP 8.1 installerat med alla extensions"

# Skapa nginx användare
log "Skapar nginx systemanvändare..."
useradd -r -s /bin/false nginx 2>/dev/null || log "nginx användare existerar redan"

# Säker PHP 8.1 konfiguration
log "Konfigurerar PHP 8.1 med säkra inställningar..."
cat > /etc/php/8.1/fpm/pool.d/www.conf << 'EOF'
[www]
user = nginx
group = nginx
listen = 127.0.0.1:9002
listen.owner = nginx
listen.group = nginx
listen.mode = 0660

pm = dynamic
pm.max_children = 50
pm.start_servers = 5
pm.min_spare_servers = 5
pm.max_spare_servers = 35
pm.max_requests = 500

; Säkerhetsinställningar - Viktiga funktioner tillåtna för FOS-Streaming
php_admin_value[disable_functions] = show_source,highlight_file,ini_alter,ini_restore,dl,openlog,syslog,readlink,symlink,popepassthru,stream_socket_server,fsocket
php_admin_flag[allow_url_fopen] = on
php_admin_flag[allow_url_include] = off
php_value[session.cookie_httponly] = 1
php_value[session.cookie_secure] = 1
php_value[session.use_strict_mode] = 1
php_value[session.name] = FOS_SESSID

; Security headers
php_value[expose_php] = Off
php_value[display_errors] = Off
php_value[log_errors] = On
php_value[error_log] = /var/log/fos-streaming/php-error.log

; Upload limits
php_value[upload_max_filesize] = 50M
php_value[post_max_size] = 50M
php_value[max_execution_time] = 120
php_value[max_input_time] = 60
php_value[memory_limit] = 512M
EOF

# PHP.ini säkerhetshärdning
log "Härdning av PHP.ini säkerhetsinställningar..."
sed -i 's/;cgi.fix_pathinfo=1/cgi.fix_pathinfo=0/g' /etc/php/8.1/fpm/php.ini
sed -i 's/output_buffering = 4096/output_buffering = Off/g' /etc/php/8.1/fpm/php.ini
sed -i 's/expose_php = On/expose_php = Off/g' /etc/php/8.1/fpm/php.ini
sed -i 's/;date.timezone =/date.timezone = Europe\/Stockholm/g' /etc/php/8.1/fpm/php.ini
sed -i 's/;opcache.enable=1/opcache.enable=1/g' /etc/php/8.1/fpm/php.ini
sed -i 's/;opcache.memory_consumption=128/opcache.memory_consumption=256/g' /etc/php/8.1/fpm/php.ini

# Starta om PHP-FPM
systemctl restart php8.1-fpm
systemctl enable php8.1-fpm

success "PHP 8.1 konfigurerat och aktiverat"

# Installera utvecklingsbibliotek
log "Installerar utvecklingsbibliotek för kompilering..."
apt-get install -y libxml2-dev libbz2-dev libcurl4-openssl-dev libmhash2 libmhash-dev \
    libpcre3 libpcre3-dev libxslt1-dev libpopt0 libpq-dev libpq5 libpspell-dev \
    libpthread-stubs0-dev libqdbm-dev libqdbm14 libquadmath0 librecode-dev librecode0 \
    librtmp-dev libsasl2-dev libsasl2-modules libsctp-dev libsctp1 libsensors-config \
    libsensors5 libsm-dev libsm6 libsnmp-base libsnmp-dev libsnmp-perl libsnmp40 \
    libsqlite3-dev libssh2-1 libssh2-1-dev libsybdb5 libtasn1-6-dev libterm-readkey-perl \
    libtidy-dev libtiff5 libtiff5-dev libtiffxx5 libtimedate-perl libtinfo-dev libtool \
    libunistring2 libvpx-dev libwrap0-dev libx11-6 libx11-data libx11-dev libxau-dev \
    libxau6 libxcb1 libxcb1-dev libxdmcp-dev libxdmcp6 libxml2 libxml2-dev libxmltok1 \
    libxmltok1-dev libxpm-dev libxpm4 libxslt1-dev libxslt1.1 libxt-dev libxt6 \
    linux-libc-dev man-db make m4 netcat-openbsd patch pkg-config python3 python3-minimal \
    re2c unixodbc unixodbc-dev uuid-dev x11-common x11proto-dev xorg-sgml-doctools \
    xtrans-dev zlib1g-dev libjpeg-dev libgcc-s1 libgd-dev libgtk-3-0 libgdk-pixbuf-2.0-0 \
    libfontconfig1 libxrender1 libglib2.0-0 libxft2 libfreetype6 libc6 zlib1g libpng-dev \
    libgeoip-dev po-debconf

# Rensa paket
apt-get autoremove -y

# Skapa FOS streaming användare
log "Skapar FOS streaming systemanvändare..."
/usr/sbin/useradd -s /sbin/nologin -U -d /home/fos-streaming -m fosstreaming 2>/dev/null || log "fosstreaming användare existerar redan"

# Klona nginx build repository
log "Laddar ner nginx build tools..."
cd /
if [ -d "/fospackv69" ]; then
    rm -rf /fospackv69
fi

git clone --recurse-submodules "$NGINX_REPO"
if [ ! -d "/fospackv69" ]; then
    error "Misslyckades med att klona nginx build repository"
    exit 1
fi

cp -a /fospackv69/fos /home/fos-streaming/

# Bygg nginx med RTMP module
log "Bygger nginx med RTMP module (detta kan ta 10-15 minuter)..."
cd /fospackv69/nginx-builder
bash build.sh || {
    warn "Nginx build misslyckades, försöker alternativ installation..."
    apt-get install -y nginx-full
}

cd /
rm -rf /fospackv69

success "Nginx med RTMP module byggt och installerat"

# Klona huvudrepository med säkra förbättringar
log "Laddar ner FOS-Streaming från optiix repository..."
cd /home/fos-streaming/fos
rm -rf www
git clone "$MAIN_REPO" www

if [ ! -d "/home/fos-streaming/fos/www" ]; then
    error "Misslyckades med att klona FOS-Streaming repository"
    exit 1
fi

success "FOS-Streaming säkra version laddad från optiix repository"

# Installera Composer dependencies
log "Installerar PHP dependencies via Composer..."
cd /home/fos-streaming/fos/www
if [ -f "composer.json" ]; then
    composer install --no-dev --optimize-autoloader
else
    warn "composer.json saknas, hoppar över composer install"
fi

# Skapa säker .env fil med genererade lösenord
log "Skapar säker .env konfigurationsfil..."
cat > /home/fos-streaming/fos/www/.env << EOF
# FOS-Streaming Säker Konfiguration
# Genererad automatiskt av installationsskriptet
APP_ENV=production
APP_DEBUG=false
APP_KEY=$APP_KEY

# Databasinställningar
DB_HOST=localhost
DB_DATABASE=fos
DB_USERNAME=fos
DB_PASSWORD=$MYSQL_FOS_PASSWORD
DB_PREFIX=

# FFmpeg sökvägar
FFMPEG_PATH=/usr/local/bin/ffmpeg
FFPROBE_PATH=/usr/local/bin/ffprobe

# Streaming-inställningar
HLS_FOLDER=hl
USER_AGENT=FOS-Streaming-Secure/2.0

# Säkerhetsinställningar
SESSION_LIFETIME=1800
MAX_LOGIN_ATTEMPTS=5
LOCKOUT_TIME=900
FORCE_HTTPS=false
SECURE_COOKIES=true

# Loggning
LOG_LEVEL=warning
LOG_FILE=/var/log/fos-streaming/app.log

# SMTP-inställningar (konfigurera vid behov)
MAIL_HOST=localhost
MAIL_PORT=587
MAIL_USERNAME=
MAIL_PASSWORD=
MAIL_ENCRYPTION=tls
MAIL_FROM_ADDRESS=noreply@localhost
MAIL_FROM_NAME="FOS Streaming System"
EOF

chmod 600 /home/fos-streaming/fos/www/.env

success "Säker .env fil skapad med alla konfigurationer"

# Sätt korrekta ägarskap och behörigheter
log "Sätter säkra filbehörigheter..."
chown -R nginx:nginx /home/fos-streaming/fos/www
chown -R nginx:nginx /home/fos-streaming/fos/nginx/conf
chmod -R 755 /home/fos-streaming/fos/www
chmod 600 /home/fos-streaming/fos/www/.env

# Skapa nödvändiga mappar
mkdir -p /home/fos-streaming/fos/www/hl
mkdir -p /home/fos-streaming/fos/www/cache
chmod -R 777 /home/fos-streaming/fos/www/hl
chmod -R 777 /home/fos-streaming/fos/www/cache

# Installera FFmpeg
log "Installerar senaste FFmpeg..."
wget -q http://johnvansickle.com/ffmpeg/releases/ffmpeg-release-amd64-static.tar.xz -O /tmp/ffmpeg.tar.xz || {
    warn "Misslyckades ladda ner statisk FFmpeg, installerar från repository..."
    apt-get install -y ffmpeg
    ln -sf /usr/bin/ffmpeg /usr/local/bin/ffmpeg
    ln -sf /usr/bin/ffprobe /usr/local/bin/ffprobe
}

if [ -f "/tmp/ffmpeg.tar.xz" ]; then
    tar -xJf /tmp/ffmpeg.tar.xz -C /tmp/
    FFMPEG_DIR=$(find /tmp -name "ffmpeg-*" -type d | head -1)
    if [ -n "$FFMPEG_DIR" ]; then
        cp "$FFMPEG_DIR/ffmpeg" /usr/local/bin/ffmpeg
        cp "$FFMPEG_DIR/ffprobe" /usr/local/bin/ffprobe
        chmod 755 /usr/local/bin/ffmpeg /usr/local/bin/ffprobe
        rm -rf /tmp/ffmpeg*
        success "Senaste FFmpeg installerat"
    fi
fi

# Konfigurera MariaDB
log "Installerar och konfigurerar MariaDB..."
curl -k -o /etc/apt/trusted.gpg.d/mariadb_release_signing_key.asc 'https://mariadb.org/mariadb_release_signing_key.asc'
echo 'deb https://fastmirror.pp.ua/mariadb/repo/10.11/debian bookworm main' > /etc/apt/sources.list.d/mariadb.list

# Pre-konfigurera MariaDB installation
echo "mariadb-server mysql-server/root_password password $MYSQL_ROOT_PASSWORD" | debconf-set-selections
echo "mariadb-server mysql-server/root_password_again password $MYSQL_ROOT_PASSWORD" | debconf-set-selections

apt-get update -y
apt-get install -y mariadb-server mariadb-client

# Starta MariaDB
systemctl stop mariadb 2>/dev/null || true
systemctl start mariadb
systemctl enable mariadb

# Vänta på MariaDB
sleep 5

# Skapa databas och användare
log "Skapar databas och användare..."
mysql -uroot -p"$MYSQL_ROOT_PASSWORD" -e "CREATE DATABASE IF NOT EXISTS fos CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;" 2>/dev/null || {
    # Om lösenord inte fungerar (ny installation)
    mysql -uroot -e "ALTER USER 'root'@'localhost' IDENTIFIED BY '$MYSQL_ROOT_PASSWORD';"
    mysql -uroot -e "FLUSH PRIVILEGES;"
    mysql -uroot -p"$MYSQL_ROOT_PASSWORD" -e "CREATE DATABASE IF NOT EXISTS fos CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;"
}

mysql -uroot -p"$MYSQL_ROOT_PASSWORD" -e "CREATE USER IF NOT EXISTS 'fos'@'localhost' IDENTIFIED BY '$MYSQL_FOS_PASSWORD';"
mysql -uroot -p"$MYSQL_ROOT_PASSWORD" -e "GRANT ALL PRIVILEGES ON fos.* TO 'fos'@'localhost';"
mysql -uroot -p"$MYSQL_ROOT_PASSWORD" -e "FLUSH PRIVILEGES;"

success "MariaDB installerat och konfigurerat"

# Skapa systemd service för FOS cron
log "Skapar säker systemd cron service..."
cat > /etc/systemd/system/fos-streaming-monitor.service << 'EOF'
[Unit]
Description=FOS Streaming Monitor Service
After=network.target mariadb.service

[Service]
Type=oneshot
User=nginx
Group=nginx
WorkingDirectory=/home/fos-streaming/fos/www
ExecStart=/usr/bin/php8.1 /home/fos-streaming/fos/www/cron.php
StandardOutput=journal
StandardError=journal
PrivateTmp=true
ProtectSystem=strict
ProtectHome=true
ReadWritePaths=/home/fos-streaming/fos /var/log/fos-streaming /tmp
NoNewPrivileges=true

# Säkerhetshärdning
PrivateDevices=true
ProtectKernelTunables=true
ProtectKernelModules=true
ProtectControlGroups=true
RestrictRealtime=true
SystemCallFilter=@system-service

# Resource limits
MemoryLimit=512M
CPUQuota=50%
TasksMax=50
EOF

cat > /etc/systemd/system/fos-streaming-monitor.timer << 'EOF'
[Unit]
Description=Run FOS Streaming Monitor every minute
Requires=fos-streaming-monitor.service

[Timer]
OnCalendar=*:*:00
Persistent=true
AccuracySec=1s

[Install]
WantedBy=timers.target
EOF

systemctl daemon-reload
systemctl enable fos-streaming-monitor.timer
systemctl start fos-streaming-monitor.timer

success "Säker systemd cron service skapad och aktiverad"

# Skapa ytterligare web directory struktur
log "Skapar web directory struktur..."
mkdir -p /home/fos-streaming/fos/www1/log/
chown nginx:nginx /home/fos-streaming/fos/www1/log/

# Kopiera filer till www1
cp -R /home/fos-streaming/fos/www/* /home/fos-streaming/fos/www1/
rm -rf /home/fos-streaming/fos/www1/*.php
rm -rf /home/fos-streaming/fos/www1/hl

# Skapa symlinks
ln -s /home/fos-streaming/fos/www/hl /home/fos-streaming/fos/www1/hl
ln -s /home/fos-streaming/fos/www/config.php /home/fos-streaming/fos/www1/config.php
ln -s /home/fos-streaming/fos/www/functions.php /home/fos-streaming/fos/www1/functions.php
ln -s /home/fos-streaming/fos/www/stream.php /home/fos-streaming/fos/www1/stream.php
ln -s /home/fos-streaming/fos/www/playlist.php /home/fos-streaming/fos/www1/playlist.php

# Länka PHP binary
mkdir -p /home/fos-streaming/fos/php/bin
ln -sf /usr/bin/php8.1 /home/fos-streaming/fos/php/bin/php

# Ladda ner säker nginx konfiguration
log "Konfigurerar nginx med säkra inställningar..."
curl -s https://raw.githubusercontent.com/optiix/FOS-Streaming-v69/master/nginx.conf > /home/fos-streaming/fos/nginx/conf/nginx.conf || {
    warn "Misslyckades ladda ner nginx config, använder standard"
}

# Starta om tjänster
log "Startar tjänster..."
systemctl restart php8.1-fpm

# Starta nginx
if [ -f "/home/fos-streaming/fos/nginx/sbin/nginx_fos" ]; then
    /home/fos-streaming/fos/nginx/sbin/nginx_fos
    success "Nginx startat"
else
    warn "nginx_fos binary hittades inte"
fi

# Vänta på tjänster
sleep 5

# Initiera databas
log "Initierar databas tabeller..."
curl -s http://127.0.0.1:7777/install_database_tables.php?install=fresh 2>/dev/null || warn "Databas initiering kan ha misslyckats"
curl -s http://127.0.0.1:7777/install_database_tables.php?install 2>/dev/null || warn "Databas setup fortsätter..."

# Rensa installation filer
rm -rf /home/fos-streaming/fos/www/install_database_tables.php 2>/dev/null || true

# Hämta offentlig IP
PUBLIC_IP=$(curl -s api.ipify.org 2>/dev/null || curl -s ifconfig.me 2>/dev/null || echo "SERVER_IP")

# Slutlig säkerhetsrapport
echo ""
echo -e "${GREEN}============================================================="
echo "🎉 FOS-STREAMING V69 SÄKER INSTALLATION SLUTFÖRD! 🎉"
echo "=============================================================${NC}"
echo ""
echo -e "${CYAN}📡 ÅTKOMSTINFORMATION:${NC}"
echo -e "   🌐 Web Panel: ${GREEN}http://$PUBLIC_IP:7777${NC}"
echo -e "   👤 Standard Login: ${YELLOW}admin / admin${NC}"
echo -e "   🔐 Ändra lösenord OMEDELBART efter första inloggning!"
echo ""
echo -e "${CYAN}🔒 SÄKERHETSINFORMATION:${NC}"
echo -e "   🛡️  Brandvägg (UFW): Aktiverad"
echo -e "   🚫 Fail2Ban: Aktiverat (skydd mot attacker)"
echo -e "   🔐 Säkra lösenord: Automatiskt genererade"
echo -e "   🔑 Krypteringsnycklar: Slumpmässigt genererade"
echo ""
echo -e "${CYAN}💾 DATABASINFORMATION:${NC}"
echo -e "   🗄️  Databas: fos"
echo -e "   👤
